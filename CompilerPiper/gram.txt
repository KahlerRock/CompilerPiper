grammar gram;

COMMENT : '//'~[\n]* -> skip;
WHITESPACE : [ \t\r\n]+ -> skip;
SEMI : ';';
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
FPNUM : ([0-9]+[.][0-9]*|[.][0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+;
NUM : [0-9]+;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : [>][=]|[<][=]|[>]|[<]|[!][=]|[=][=];
EQ : [=];
PLUS : [+];
MULOP : [*/%];
MINUS : [-];
CMA : [,];
TYPE : 'int'|'string'|'double';
STRING_CONSTANT : ["]([\\]["]|[\\]'n'|[\\][\\]|~["])*["];
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z_]+;

program : braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
expr : NUM;
returnStmt : RETURN expr;